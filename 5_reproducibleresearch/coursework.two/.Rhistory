source("plot1.R")
data$PROPDMGEXP <- as.character(data$PROPDMGEXP)
data$PROPDMGEXP <- as.character(data$PROPDMGEXP)
data$PROPDMGEXP <- as.character(data$PROPDMGEXP)
data$PROPDMGEXP <- as.character(data$PROPDMGEXP)
data
dataset$PROPDMGEXP <- as.character(dataset$PROPDMGEXP)
if(!file.exists("./data/repdata-data-StormData.csv")){
dataset <- read.table(
bzfile("./data/repdata-data-StormData.csv.bz2",
"repdata-data-StormData.csv"), sep=",", header=T, na.string="NA")
}
setwd("~/Google Drive/LJMU6/Research/Git/datascience/5_reproducibleresearch/coursework.two")
setwd("~/Google Drive/LJMU6/Research/Git/datascience/5_reproducibleresearch/coursework.two")
if(!file.exists("./data/repdata-data-StormData.csv")){
dataset <- read.table(
bzfile("./data/repdata-data-StormData.csv.bz2",
"repdata-data-StormData.csv"), sep=",", header=T, na.string="NA")
}
#Need to do
library(plyr)
#Fist of all summerise all the fatalities and injuries for all of the event types in the dataset.
casulties <- ddply(dataset, .(EVTYPE), summarize,
fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
#Get the top 10  event types that cause the most harm.
fatal.events <- head(casulties[order(casulties$fatalities, decreasing=TRUE), ], 10)
#Display the top 10 results
fatal.events
##Top 10 Events that Caused the Highest Number of Deaths
fatal.events[order(fatal.events$fatalities, decreasing=TRUE), c("EVTYPE", "fatalities")]
##Top 10 Events that Caused the Highest Number of Injuries
fatal.events[order(fatal.events$injuries, decreasing=TRUE), c("EVTYPE", "injuries")]
dataset$PROPDMGEXP <- as.character(dataset$PROPDMGEXP)
dataset$PROPDMGEXP[grep("K", dataset$PROPDMGEXP)] <- "1000"
dataset$PROPDMGEXP <- as.character(dataset$PROPDMGEXP)
dataset$PROPDMGEXP[grep("K", dataset$PROPDMGEXP)] <- "1000"
dataset$PROPDMGEXP[grep("k", dataset$PROPDMGEXP)] <- "1000"
dataset$PROPDMGEXP[grep("M", dataset$PROPDMGEXP)] <- "1000000"
dataset$PROPDMGEXP[grep("m", dataset$PROPDMGEXP)] <- "1000000"
dataset$PROPDMGEXP[grep("B", dataset$PROPDMGEXP)] <- "1000000000"
dataset$PROPDMGEXP[grep("b", dataset$PROPDMGEXP)] <- "1000000000"
to.be.removed <- dataset$PROPDMGEXP %in% c("1000", "1000000", "1000000000") == F
dataset$PROPDMGEXP[to.be.removed == TRUE] <- 1
dataset$PROPDMGEXP <- as.numeric(data$PROPDMGEXP)
dataset$PROPDMGEXP <- as.numeric(dataset$PROPDMGEXP)
#This is really ugly code, but I am running out of time to submit
#this coursework. Need to do - look at colapsing it into a function
#PROPDMGEXP
#Convert the exponential to a numeric value that we can work with.
dataset$PROPDMGEXP <- as.character(dataset$PROPDMGEXP)
dataset$PROPDMGEXP[grep("K", dataset$PROPDMGEXP)] <- "1000"
dataset$PROPDMGEXP[grep("k", dataset$PROPDMGEXP)] <- "1000"
dataset$PROPDMGEXP[grep("M", dataset$PROPDMGEXP)] <- "1000000"
dataset$PROPDMGEXP[grep("m", dataset$PROPDMGEXP)] <- "1000000"
dataset$PROPDMGEXP[grep("B", dataset$PROPDMGEXP)] <- "1000000000"
dataset$PROPDMGEXP[grep("b", dataset$PROPDMGEXP)] <- "1000000000"
#Set all other characters to 1 - we consider this to be noise in the data.
to.be.one <- dataset$PROPDMGEXP %in% c("1000", "1000000", "1000000000") == F
dataset$PROPDMGEXP[to.be.one == TRUE] <- 1#
#Change the variable to numeric so that we can perform the calculations
dataset$PROPDMGEXP <- as.numeric(dataset$PROPDMGEXP)
#CROPDMGEXP
#Convert the exponential to a numeric value that we can work with.
dataset$CROPDMGEXP <- as.character(dataset$CROPDMGEXP)
dataset$CROPDMGEXP[grep("K", dataset$CROPDMGEXP)] <- "1000"
dataset$CROPDMGEXP[grep("k", dataset$CROPDMGEXP)] <- "1000"
dataset$CROPDMGEXP[grep("M", dataset$CROPDMGEXP)] <- "1000000"
dataset$CROPDMGEXP[grep("m", dataset$CROPDMGEXP)] <- "1000000"
dataset$CROPDMGEXP[grep("B", dataset$CROPDMGEXP)] <- "1000000000"
dataset$CROPDMGEXP[grep("b", dataset$CROPDMGEXP)] <- "1000000000"
#Set all other characters to 1 - we consider this to be noise in the data.
to.be.one <- dataset$CROPDMGEXP %in% c("1000", "1000000", "1000000000") == F
dataset$CROPDMGEXP[to.be.one == TRUE] <- 1#
#Change the variable to numeric so that we can perform the calculations
dataset$CROPDMGEXP <- as.numeric(dataset$CROPDMGEXP)
#Calculate the costs
dataset$prop.damage <- dataset$PROPDMG * dataset$PROPDMGEXP
dataset$crop.damage <- dataset$CROPDMG * dataset$CROPDMGEXP
head(data$prop.damage)
head(dataset$prop.damage)
tail(dataset$prop.damage)
head(top.ten.crop)
#Extract the top 10 most
top.ten.prop <- head(dataset[order(dataset$prop.damage, decreasing=TRUE),], 10)
top.ten.crop <- head(dataset[order(dataset$crop.damage, decreasing=TRUE),], 10)
head(top.ten.prop)
head(dataset)
head(top.ten.crop)
View(top.ten.crop)
head(top.ten.crop)
head(top.ten.prop[,c("EVTYPE", "prop.damaage")])
names(top.ten.prop)
head(top.ten.prop[,c("EVTYPE", "prop.damage")])
head(top.ten.prop[,c("EVTYPE", "crop.damage")])
#This is really ugly code, but I am running out of time to submit
#this coursework. Need to do - look at colapsing it into a function
#PROPDMGEXP
#Convert the exponential to a numeric value that we can work with.
dataset$PROPDMGEXP <- as.character(dataset$PROPDMGEXP)
dataset$PROPDMGEXP[grep("K", dataset$PROPDMGEXP)] <- "1000"
dataset$PROPDMGEXP[grep("k", dataset$PROPDMGEXP)] <- "1000"
dataset$PROPDMGEXP[grep("M", dataset$PROPDMGEXP)] <- "1000000"
dataset$PROPDMGEXP[grep("m", dataset$PROPDMGEXP)] <- "1000000"
dataset$PROPDMGEXP[grep("B", dataset$PROPDMGEXP)] <- "1000000000"
dataset$PROPDMGEXP[grep("b", dataset$PROPDMGEXP)] <- "1000000000"
#Set all other characters to 1 - we consider this to be noise in the data.
to.be.one <- dataset$PROPDMGEXP %in% c("1000", "1000000", "1000000000") == F
dataset$PROPDMGEXP[to.be.one == TRUE] <- "1"
#Change the variable to numeric so that we can perform the calculations
dataset$PROPDMGEXP <- as.numeric(dataset$PROPDMGEXP)
#CROPDMGEXP
#Convert the exponential to a numeric value that we can work with.
dataset$CROPDMGEXP <- as.character(dataset$CROPDMGEXP)
dataset$CROPDMGEXP[grep("K", dataset$CROPDMGEXP)] <- "1000"
dataset$CROPDMGEXP[grep("k", dataset$CROPDMGEXP)] <- "1000"
dataset$CROPDMGEXP[grep("M", dataset$CROPDMGEXP)] <- "1000000"
dataset$CROPDMGEXP[grep("m", dataset$CROPDMGEXP)] <- "1000000"
dataset$CROPDMGEXP[grep("B", dataset$CROPDMGEXP)] <- "1000000000"
dataset$CROPDMGEXP[grep("b", dataset$CROPDMGEXP)] <- "1000000000"
#Set all other characters to 1 - we consider this to be noise in the data.
to.be.one <- dataset$CROPDMGEXP %in% c("1000", "1000000", "1000000000") == F
dataset$CROPDMGEXP[to.be.one == TRUE] <- "1"
#Change the variable to numeric so that we can perform the calculations
dataset$CROPDMGEXP <- as.numeric(dataset$CROPDMGEXP)
#Calculate the costs
dataset$prop.damage <- dataset$PROPDMG * dataset$PROPDMGEXP
dataset$crop.damage <- dataset$CROPDMG * dataset$CROPDMGEXP
#Extract the top 10 most
top.ten.prop <- head(dataset[order(dataset$prop.damage, decreasing=TRUE),], 10)
top.ten.crop <- head(dataset[order(dataset$crop.damage, decreasing=TRUE),], 10)
head(top.ten.crop)
head(top.ten.prop)
head(top.ten.crop)
head(top.ten.crop[,c("EVTYPE")])
head(top.ten.crop[,c("EVTYPE")], n-10)
head(top.ten.crop[,c("EVTYPE")], n=10)
head(top.ten.crop[,c("EVTYPE", prop.damage)], n-10)
head(top.ten.crop[,c("EVTYPE", "prop.damage")], n-10)
head(top.ten.crop[,c("EVTYPE", "prop.damage")], n=10)
head(top.ten.crop[,c("EVTYPE", "prop.crop")], n=10)
head(top.ten.crop[,c("EVTYPE", "crop.damage")], n=10)
head(top.ten.crop[,c("EVTYPE", "prop.damage")], n=10)
head(top.ten.prop[,c("EVTYPE", "prop.damage")], n=10)
top.ten.fatalities <- fatal.events[order(fatal.events$fatalities, decreasing=TRUE), c("EVTYPE", "fatalities")]
##Top 10 Events that Caused the Highest Number of Injuries
top.ten.injuries <- fatal.events[order(fatal.events$injuries, decreasing=TRUE), c("EVTYPE", "injuries")]
head(top.ten.fatalities[,c("EVTYPE", "prop.damage")], n=10)
head(top.ten.fatalities[,c("EVTYPE", "fatalities")], n=10)
head(top.ten.injuries[,c("EVTYPE", "injuries")], n=10)
stat_summary(fun.y = median, geom="bar")
#Plot top ten fatalities by event type
library(ggplot2)
ggplot(top.ten.fatalities, aes(EVTYPE, fatalities, fill=fatalities)) +
geom_bar() + coord_flip() +
stat_summary(fun.y = median, geom="bar")
ggplot(top.ten.fatalities, aes(EVTYPE, fatalities, fill=fatalities)) +
geom_bar() + coord_flip()
ggplot(top.ten.fatalities, aes(EVTYPE, fatalities, fill=fatalities)) +
geom_bar(stat="identity") + coord_flip() +
stat_summary(fun.y = median, geom="bar")
#Plot top ten injuries by event type
library(ggplot2)
ggplot(top.ten.injuries, aes(EVTYPE, injuries, fill=injuries)) +
geom_bar(stat="identity") + coord_flip() +
stat_summary(fun.y = median, geom="bar")
library(ggplot2)
ggplot(prog.dmg.events, aes(EVTYPE, prop.dmg, fill=prop.dmg)) +
geom_bar(stat="identity") + coord_flip() +
stat_summary(fun.y = median, geom="bar")
View(top.ten.fatalities)
View(top.ten.prop)
View(top.ten.prop)
View(top.ten.prop)
View(top.ten.injuries)
ggplot(top.ten.prop, aes(EVTYPE, prop.damage, fill=prop.damage)) +
geom_bar(stat="identity") + coord_flip() +
stat_summary(fun.y = median, geom="bar")
x <- top.ten.prop[,c("EVTYP", "injuries")]
x <- top.ten.prop[c("EVTYP", "injuries"),]
x
ggplot(top.ten.prop[,c("EVTYPE", "fatalities")], aes(EVTYPE, prop.damage, fill=prop.damage)) +
geom_bar(stat="identity") + coord_flip() +
stat_summary(fun.y = median, geom="bar")
ggplot(top.ten.prop[,c("EVTYPE", "prop.damage")], aes(EVTYPE, prop.damage, fill=prop.damage)) +
geom_bar(stat="identity") + coord_flip() +
stat_summary(fun.y = median, geom="bar")
top.ten.prop[,c("EVTYPE", "prop.damage")]
head(casulties, n=10)
top.ten.fatalities
top.ten.prop
top.ten.prop <- head(unique(dataset[order(dataset$prop.damage, decreasing=TRUE),], 10))
?unique
top.ten.prop <- head(unique(dataset[order(dataset$prop.damage, decreasing=TRUE),], 10), incomparables = FALSE)
top.ten.prop <- head(unique(dataset[order(dataset$prop.damage, decreasing=TRUE),], 10)
)
casulties <- ddply(dataset, unique(.(EVTYPE)), summarize,
fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
duplicated(dataset)
1950
x <- reorder (top.ten.fatalities$EVTYPE, top.ten.fatalities$fatalities)
x
dim(x)
x <- rnorm(10)
hist(x)
x <- rnorm(100)
hist(x)
hist(log(x))
x <- rnorm(10000)
hist(log(x))
library(datasets)
library(stats)
data(airquality)
ffit <- lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
summary(ffit)
par(mfrow = c(2,2))
plot(ffit)
library(cacher)
install.packages("cacher")
install.packages("cacher.R")
loadcache()
