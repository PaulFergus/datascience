source("plot1.R")
.10 + 009
.10 + .09
0.19 - .15
12 - 6
19 - 15
6+12
-17
12 - 17
-5 + 6
15-9
15 - (10-4)
17 - (16-6)
15-10
+4
17-12
5 + 6
x <- 1:4
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp$p)
temp$p
class(tmep)
class(temp)
temp$x
temp[,1]
temp[1,]
temp[2,]
mean(temp[2,])
mean(temp[1,])
4 *0.1
(1*.1) + (2*.2)+(3*.3)+(4*.4)
75/(1-52)
1-52
.75*.30/(.75*.30 +(1-.52*1-.75))
nosim <- 1000
n <- 10
sd(apply(matrix(rnorms(noisim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(noisim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1 / sqrt(n)
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1 / sqrt(n)
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
1 / sqrt(12 * n)
library(UsingR)
package.install(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
plot(x)
qplot(x)
ggplot(x)
library("ggplot2")
ggplot(x)
var(x)
sd(x)
choose(8,7)
choose(8,7)
choose(8,7)
choose(8,7)
choose(8,7)
choose(8,7)
choose(8,7)
?choose
choose(5,2)
choose(5,2)
choose(5,2)
choose(8,7)
choose(8,7) * .5^8 + choose(8,8) * .5^8
pbinom(6,size=8, prob = .5, lower.tail = F)
?pbinom
pbinom(5,size=8, prob = .5, lower.tail = F)
pbinom(6,size=10, prob = .5, lower.tail = F)
pbinom(6,size=10, prob = .5, lower.tail = F)
pbinom(8,size=10, prob = .5, lower.tail = F)
.5^8
8*.5^8
help(Binomial)
qnorm(.95, mean = mu, sd = sd)
pnorm(1160, 1020, lower.tail = F)
pnorm(1160, 1020, sd=50, lower.tail = F)
pnorm(2.8, lower.tail = F)
(1160-1020)/50
qnorm(0.75, mean = 1020, sd-50)
qnorm(0.75, mean = 1020, sd=50)
round(qnorm(0.75, mean = 1020, sd=50))
round(qnorm(0.05, mean = 11, sd=2))
round(qnorm(0.95, mean = 11, sd=2))
11 - 5/2
(11 - 5)/2
ppois(3,lambda=2.5*4)
ppois(40lambda=9*5)
ppois(40,lambda=9*5)
n <- 1000
means <- cumsum((rnorm(n)/1:n))
plot(means)
n <- 10000
means <- cumsum((rnorm(n)/1:n))
plot(means)
1:n
means <- cumsum((sample(0:1, n, replace = T))/(1:n)
means <- cumsum(sample(0:1, n, replace = T)/(1:n)
means <- cumsum(sample(0:1, n, replace = T)/(1:n)
means <- cumsum(sample(0:1, n, replace = T))/(1:n)
means <- cumsum(sample(0:1, n, replace = T))/(1:n)
plot(means)
n <- 10
means <- cumsum(sample(0:1, n, replace = T))/(1:n)
plot(means)
sqrt(0.25)
0.5/100
pnorm(0.45,0.5,0.05)
(1-0.5)/100
sqrt(0.5 * (1-0.5)/100)
x <- father.son$fheight mean(x) + gnorm(c(0.025,0.975)) * sd(x) /sqrt(length(x))
x <- father.son$fheight mean(x) + gnorm(c(0.025,0.975)) * sd(x) /sqrt(length(x))
x <- father.son$fheight
mean(x) + gnorm(c(0.025,0.975)) * sd(x) /sqrt(length(x))
mean(x) + qnorm(c(0.025,0.975)) * sd(x) /sqrt(length(x))
round(pnor(70, mean=80, sd=10)) * 100
round(pnorm(70, mean=80, sd=10)) * 100
round((pnorm(70, mean=80, sd=10)) * 100)
round((pnorm(70, mean=80, sd=10)))
(pnorm(70, mean=80, sd=10))
qnorm(.95)
qnorm(1100, sd=75)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75)
qnorm(0.95, mean=1100, sd=75)
round(qnorm(0.95, mean=1100, sd=75))
round(qnorm(0.95, mean=100, sd=75))
se <- 75/sqrt(1100)
se
1100 + (1.64 * 2.26)
1100 + (1.65 * 2.26)
mean = 1100
n = 100
SD = 75
SE = SD/sqrt(n)
round(mean + (1.65 * SE))
P4 = choose(5, 4) * 0.5^4 * 0.5^1
P5 = choose(5, 5) * 0.5^5 * 0.5^0
P4or5 = P4 + P5
round(P4or5 * 100)
P4or5
?rnorm
mean(rnomr(1e+07, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(1e+07, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(100, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(1000, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(10000, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(100000, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(100000, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(100000, mean=0.5, sd=sqrt(1/12)))
mean(rnorm(100000, mean=0.5, sd=sqrt(1/12)))
ppois(10, lambda = 5*3)
ppois(10, lambda = 5*3)
ppois(10, lambda = 5*3)
ppois(10, lambda = 5*3)
ppois(10, lambda = 5*3)
ppois(10, lambda = 5*3)
x <- rnorm(1:100)
x
plot(x)
m <- mean(x)
m
y <- x - m
plot(y)
y
x
plot(x, y)
plot(x, type=l)
plot(x, type='l')
hold
plot(y, type='l')
x
y
manipulate
?manipulate
library(manipulate)
manipulate(plot(x))
k <- 1000
xvals <- seq(-5,5, length = k)
myplot <- function(df){}
clear all
setwd("~/Google Drive/LJMU6/Research/Git/datascience/6_statisticalinference")
x  = xvals,
k <- 1000
xvals <- seq(-5,5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals),dt(xvals,df)),
x  = xvals,
dis = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x=x, y=y))
g <- g + geom_line(size=2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1,20,step=1))
library(manipulate)
manipulate(myplot(mu), mu = slider(1,20,step=1))
library(ggplot2)
manipulate(myplot(mu), mu = slider(1,20,step=1))
library(manipulate)
library(ggplot2)
k <- 1000
xvals <- seq(-5,5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals),dt(xvals,df)),
x  = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x=x, y=y))
g <- g + geom_line(size=2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1,20,step=1))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n=qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x=n, y=t))
g <- g + geom_abline(size =2, col = "lightblue")
g <- g + geom_line(size = 2, col = "black")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = gt(0.975, df))
g
}
manipulate(myplot2(df), df = slider(1,20, step=1))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n=qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x=n, y=t))
g <- g + geom_abline(size =2, col = "lightblue")
g <- g + geom_line(size = 2, col = "black")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(df), df = slider(1,20, step=1))
data(sleep)
head(sleep)
tail(sleep)
x_bar <- 1100
s <- 30
n <- 9
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1) # 2.306004
round(x_bar + c(-1, 1) * ts * s / sqrt(n)) # 1077 1123
x_bar <- -2
n <- 9
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1) # 2.306004
s <- -x_bar*sqrt(n) / ts
s # 2.601903
n_x <- 10
n_y <- 10
x_bar <- 5 # old_system
y_bar <- 3 # new_system
var_x <- 0.6
var_y <- 0.68
alpha <- 0.05
sp_2 <- ((n_x - 1)*var_x + (n_y - 1)*var_y) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
round((y_bar - x_bar) + c(-1, 1) * ts * sp * (sqrt(1/n_x + 1/n_y)), 2)
# -2.75 -1.25
n_x <- 100
n_y <- 100
x_bar <- 6
y_bar <- 4
s_x <- 2
s_y <- 0.5
alpha <- 0.05
sp_2 <- ((n_x - 1)*s_x^2 + (n_y - 1)*s_y^2) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
round((x_bar - y_bar) + c(-1, 1) * ts * sp * (sqrt(1/n_x + 1/n_y)), 2)
# 1.59 2.41 => The new system appears to be effective.
n_x <- 9
n_y <- 9
x_bar <- -3
y_bar <- 1
s_x <- 1.5
s_y <- 1.8
alpha <- 0.1
sp_2 <- ((n_x - 1)*s_x^2 + (n_y - 1)*s_y^2) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
round((x_bar - y_bar) + c(-1, 1) * ts * sp * (sqrt(1/n_x + 1/n_y)), 3)
# -5.364 -2.636
alpha <- .05
mu <- 12
sd <- 4
n <- 100
z <- qnorm(alpha)
m0 <- mu + z * sd / sqrt(n)
m0 # 11.34206
pharm <- data.frame(baseline = c(140, 138, 150, 148, 135),
week2 = c(132, 135, 151, 146, 130))
t.test(pharm$baseline, pharm$week2, alternative = "two.sided", paired = T) # p-value = 0.08652
n <- 9
mu <- 1100
sd <- 30
alpha <- .05
tstat <- qt(1 - alpha/2, n - 1)
mu + c(-1, 1)*tstat*sd / sqrt(n) # 1076.94 1123.06
library(stats)
binom.test(x = 3, n = 4, p = .5, alt = "greater") # p-value = 0.3125
p <- 1 / 100
pr <- 10 / 1787
n <- 1787
serror <- sqrt(p * (1-p) / n)
z <- (p-pr) / serror
pnorm(z, lower.tail = F) # 0.03066625
n1 <- 9
n2 <- 9
df <- n1 + n2 - 2
meanTreat <- -3
meanPlacebo <- 1
sdTreat <- 1.5
sdPlacebo <- 1.8
pooledVar <- (sdTreat^2 * n1 + sdPlacebo^2 * n2)/df
se.diff <- sqrt(pooledVar/n1 + pooledVar/n2)
tstat <- (meanTreat - meanPlacebo) / se.diff
tstat
pValue <- 2 * pt(tstat, df = df)
pValue # 0.0001852248
n <- 100
mu <- .01
sd <- .04
power.t.test(n, delta = mu, sd = sd, type = "one.sample", alt = "one.sided")$power # 0.7989855
power <- .9
power.t.test(power = power, delta = mu, sd = sd, type = "one.sample", alt = "one.sided")$n # 138.3856
n <- 288
mu1 <- 44
mu2 <- 42.04
sd <- 12
se <- sd * sqrt(1/n + 1/n)
z <- (mu1 - mu2)/se
z
pValue <- 2 * pnorm(-abs(z))
pValue # 0.04999579
