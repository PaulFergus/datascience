colSums(is.na(record.data))
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.fhr)
head(record.data, n=3)
}
colSums(is.na(record.data))
View(record.data)
colSums(is.na(as.numeric(record.data))
)
sum(is.na(as.numeric(record.data$FHR))
)
sum(is.na(as.numeric(record.data$UC)))
head(as.numeric(record.data))
head(record.data)
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.fhr)
head(record.data, n=3)
}
head(record.data)
sum(is.na(record.data$UC))
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.fhr)
head(record.data, n=3)
}
sum(is.na(record.data$UC))
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.fhr)
head(record.data, n=3)
}
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.fhr)
head(record.data, n=3)
}
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
head(record.data, n=3)
}
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
head(record.data, n=3)
}
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
head(record.data, n=3)
}
colSums(is.na(record.data))
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
head(record.data, n=3)
}
colSums(is.na(record.data))
table (record.data$UC %in% c(10.000))
table (record.data$UC %in% c(10.500))
table (record.data$UC %in% c("10.500"))
table (record.data$UC %in% c("10.000"))
record.data[record.data$UC %in% c("10.000")]
record.data[record.data$UC %in% c("10.000"),]
plot(record.data$UC)
plot(record.data$UC)
plot(record.data$FHR)
plot(record.data[record.data$Elapsed.time %in% c("10.000"),])
plot(record.data[record.data$UC %in% c("10.000"),]$Elapsed.time)
#Start index
index = 1001
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
#Are there any values in the UC variable with a value of 10.000
table (record.data$UC %in% c("10.000"))
head(record.data, n=3)
}
plot(record.data[record.data$UC %in% c("10.000"),]$Elapsed.time)
#Start index
index = 1002
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
#Are there any values in the UC variable with a value of 10.000
table (record.data$UC %in% c("10.000"))
head(record.data, n=3)
}
plot(record.data[record.data$UC %in% c("10.000"),]$Elapsed.time)
#Start index
index = 1003
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
#Are there any values in the UC variable with a value of 10.000
table (record.data$UC %in% c("10.000"))
head(record.data, n=3)
}
plot(record.data[record.data$UC %in% c("10.000"),]$Elapsed.time)
max(record.data$UC)
max(as.numeric(record.data$UC))
plot(record.data[record.data$UC %in% c("102.000"),]$Elapsed.time)
plot(record.data[record.data$UC %in% c("102"),]$Elapsed.time)
plot(record.data$UC)
hold
plot(record.data$FHR)
#Start index
index = 1000
for (i in 1:1) {
#Create directory location and filename for current index
record <- c("./data/", toString(index + i), ".csv")
record <- paste(record,collapse="")
#Load data
record.data <- read.table(record, sep=",", header=TRUE)
#Check for missing values
mv.fhr <- sum(is.na(record.data$FHR))
mv.uc <- sum(is.na(record.data$UC))
print(paste("# of NA values in record ", index + i))
print(mv.fhr)
print(mv.uc)
#Are there any values in the UC variable with a value of 10.000
table (record.data$UC %in% c("10.000"))
head(record.data, n=3)
}
plot(record.data$FHR)
plot(record.data$UC)
plot(record.data$FHR)
plot(record.data$UC)
plot(record.data$FHR)
plot(record.data$UC)
library(Hmisc)
install.packages("Hmisc")
libary(Hmisc)
library("Hmisc")
groups <- cut2(record.data$FHR, g=2)
groups <- cut2(record.data$FHR, g=4)
groups <- cut2(record.data$UC, g=4)
groups <- cut2(record.data$Elapsed.time, g=4)
setwd("~/Google Drive/LJMU6/Research/Git/datascience/3_getcleandata")
#Create our data directory
if(!file.exists("data")){
dir.create("data")
}
#Download the Baltimore fixed Speed Camera dataset
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
download.file(fileUrl, destfile = "./data/acs.csv", method="curl")
list.files("./data")
#Record the date when the dataset was downloaded
dateDownloaded <- date()
dateDownloaded
#Load data
acsData <- read.table("./data/acs.csv", sep=",", header=TRUE)
head(acsData)
agricultureLogical <- acsData[(acsData$ACR == 3 & acsData$AGS == 6),]
head(agricultureLogical)
agricultureLogical <- acsData[(acsData$ACR %in% 3 & acsData$AGS %in% 6),]
head(agricultureLogical)
agricultureLogical <- (acsData$ACR %in% 3 & acsData$AGS %in% 6)
head(agricultureLogical)
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
pic <- readJpeg(con)
readJpeg
require(biOps)
install.packages("biOps")
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
pic <- readJPEG(con)
pic <- readJPEG("getdata-jeff.jpg")
pic <- readJPEG("getdata-jeff.jpg", native=TRUE)
quantiles(pic)
quantile(pic)
quantile(pic, c("30", "80"))
quantile(pic, c("0.3", "0.8"))
quantile(pic, c(.3, .8))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "./data/gdp.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile = "./data/fsc.csv", method="curl")
#Load data
gdpData <- read.table("./data/gdp.csv", sep=",", header=TRUE)
fscData <- read.table("./data/fsc.csv", sep=",", header=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "./data/gdp.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile = "./data/fsc.csv", method="curl")
gdpData <- read.table("./data/gdp.csv", sep=",", header=TRUE)
gdpData <- read.table("./data/gdp.csv", header=TRUE)
gdpData <- read.table("./data/gdp.csv")
gdpData <- read.table("./data/gdp.csv", sep=",", header=TRUE)
View(gdpData)
fscData <- read.table("./data/fsc.csv", sep=",", header=TRUE)
gdpData <- read.csv("./data/gdp.csv", sep=",", header=TRUE)
fscData <- read.csv("./data/fsc.csv", sep=",", header=TRUE)
View(fscData)
View(gdpData)
prepost.match.data <- join(fscData, gdpData, by = c("CountryCode"))
library(plyr)
prepost.match.data <- join(fscData, gdpData, by = c("CountryCode"))
prepost.match.data <- join(fscData, gdpData, by = c("X"))
names(gdpData)
names(fscData)
prepost.match.data <- join(fscData, gdpData, by = c("X","CountryCode"))
prepost.match.data <- join(fscData$CountryCode, gdpData$X, by = c("X","CountryCode"))
prepost.match.data <- join(fscData$CountryCode, gdpData$X
)
ergedData=as.data.frame(merge(gdpData,fscData,by.x="X",by.y="CountryCode"))
ergedData
ergedData$Gross.domestic.product.2012 = as.numeric(as.character(ergedData$Gross.domestic.product.2012))
summary(ergedData[ergedData$Income.Group=="High income: OECD",])
summary(fscData)
summary(fscData)
mergedData <- merge(gdpData, fscData, by.x="X", by.y="CountryCode", all=TRUE)
head(mergedData)
tail(mergedData)
head(mergedData)
intersect(names(gdpData), names(fscData))
merge2 <= merge(gdpData, fscData, all=TRUE)
merge2 <- merge(gdpData, fscData, all=TRUE)
head(merge2)
head(merge2)
merge2
names(merge2)
View(merge2)
arrange(merge2,desc(z),b)
order(merge2$Gross.domestic.product.2012)
order(merge2$Gross.domestic.product.2012, descending=TRUE)
order(merge2$Gross.domestic.product.2012, descreasing=TRUE)
order(merge2$Gross.domestic.product.2012, decreasing=TRUE)
order(merge2$Gross.domestic.product.2012)
merge2[order(-merge2$Gross.domestic.product.2012)]
merge2[order(-Gross.domestic.product.2012)]
merge2[order(Gross.domestic.product.2012)]
attach(mtcars)
mtcars[order[mpg]]
mtcars[order[mpg],]
mtcars[order(mpg),]
merge2[order(Gross.domestic.product.2012),]
names(merge2)
merge2[order("Gross.domestic.product.2012"),]
merge2[order(X),]
merge2[order("X"),]
labels(gpdData)
labels(gdpData)
str(gdpData[100,1])
str(fscData)
table(gdpData$X, gdpData$Gross.domestic.product.2012)
url3 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url4 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url3, destfile = "./data/gdp.csv")
download.file(url4, destfile = "./data/education.csv")
gdp = read.csv("./data/gdp.csv",skip=1)
edu = read.csv("./data/education.csv")
labels(gdp)
labels(edu)
gdp
str(gdp[100,1])
str(edu)
table(gdp$X, gdp$Gross.domestic.product.2012)
str(edu$CountryCode)
attributes(edu$CountryCode)
y = levels(edu$CountryCode)
str(gdp$X)
attributes(gdp$X)
x = levels(gdp$X)
# how many codes match
table(gdp$X %in% edu$CountryCode)
library(plyr)
#rename columns
gdp$X.8 = NULL
gdp$X.7 = NULL
gdp$X.6 = NULL
gdp$X.2 = NULL
gdp = rename(gdp, c(X="CountryCode", "GDP"="Rank", X.3= "Description", X.4="GDP", X.5="Extra"))
str(gdp)
table(x %in% y)
# sort
gdp[with(gdp, order(GDP)), ]
x = gdp[1:193,]
y = subset(edu, CountryCode != " ")
x
str(x)
str(y)
table(y$CountryCode %in% x$CountryCode)
order.gdp <- order(gdp$GDP)
order.gdp
head(gdp$GDP[order.gdp])
gdp[gdp$Rank,]
labels(edu)
levels(edu$Income.Group)
x = with(edu, CountryCode[Income.Group == "High income: nonOECD"])
highIncOECD = with(edu, CountryCode[Income.Group == "High income: OECD"])
check = sapply(gdp$CountryCode, function(a) a %in% x)
check2 = sapply(gdp$CountryCode, function(a) a %in% highIncOECD)
check2
gdp$check = check
gdp$check2 = check2
y = with(gdp, Rank[check])
y = with(gdp, Rank[check2])
y
y = as.matrix(y)
y = as.numeric(y)
class(y[1:1])
#recode missing values
y[y==""] <- NA
str(y)
# exclude missing vals from analysis
mean(y, na.rm=TRUE)
## Question 5
names(gdp)
names(edu)
gdp = rename(gdp, c("CountryCode"="CountryCode1"))
mergedData = merge(gdp, edu)
str(mergedData)
attributes(mergedData$Income.Group)
levels(gdp$Rank)
result = subset(mergedData, Income.Group == "Lower middle income")
str(result)
table(result)
as.numeric(mergedData$Rank)
result$Rank
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- './data/GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('./data/GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- './data/GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# download from the URL
download.file(file.url, file.dest, method="curl")
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('./data/GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# second data file
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- './data/GDP2.csv'
# download from the URL
download.file(file.url, file.dest, method="curl" )
# read second file
fed <- read.csv('./data/GDP2.csv')
View(fed)
# merge datasets
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
View(combined)
# sort the data
combined[with(combined, order(-V2) )]
combined[with(combined, order(-V2) )]
combined[with(combined, order("-V2") )]
combined[with(combined, order(-V2))]
combined[order(combined$V2),decreasing=TRUE),]
combined[order(combined$V2,decreasing=TRUE),]
combined[order(combined$V2,decreasing=TRUE),]
tmp <- combined[order(combined$V2,decreasing=TRUE),]
head(tmp)
head(tmp)
head(tmp, n=14)
View(combined)
mean(combined[combined$Income.Group=='High income: OECD',]$V2)
mean(combined[combined$Income.Group=='High income: nonOECD',]$V2)
quentile <- c(0.2,0.4,0.6,0.8,1)
q <- quantile(combined$V2, quentile)
q1 <- combined$V2 <= 38
xtabs(q1 ~ combined$Income.Group)
